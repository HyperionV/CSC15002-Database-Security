-- Tạo cơ sở dữ liệu QLSVNhom
CREATE DATABASE QLSVNhom;
GO

USE QLSVNhom;
GO

-- Tạo Database Master Key (DMK)
CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'YourStrongPassword123!';
GO

-- Bảng Nhân viên 
CREATE TABLE NHANVIEN (
    MANV VARCHAR(20) PRIMARY KEY,
    HOTEN NVARCHAR(100) NOT NULL,
    EMAIL VARCHAR(20),
    LUONG VARBINARY(MAX),
    TENDN NVARCHAR(100) NOT NULL UNIQUE,
    MATKHAU VARBINARY(MAX) NOT NULL,
    PUBKEY VARCHAR(20) 
);

-- Bảng Lớp
CREATE TABLE LOP (
    MALOP VARCHAR(20) PRIMARY KEY,
    TENLOP NVARCHAR(100) NOT NULL,
    MANV VARCHAR(20),
    FOREIGN KEY (MANV) REFERENCES NHANVIEN(MANV) ON DELETE SET NULL
);

-- Bảng Sinh viên 
CREATE TABLE SINHVIEN (
    MASV VARCHAR(20) PRIMARY KEY,
    HOTEN NVARCHAR(100) NOT NULL,
    NGAYSINH DATETIME,
    DIACHI NVARCHAR(200),
    MALOP VARCHAR(20), 
    TENDN NVARCHAR(100) NOT NULL UNIQUE,
    MATKHAU VARBINARY(MAX) NOT NULL,
    FOREIGN KEY (MALOP) REFERENCES LOP(MALOP) ON DELETE SET NULL
);

-- Bảng Học phần
CREATE TABLE HOCPHAN (
    MAHP VARCHAR(20) PRIMARY KEY,
    TENHP NVARCHAR(100) NOT NULL,
    SOTC INT
);

-- Bảng Bảng điểm
CREATE TABLE BANGDIEM (
    MASV VARCHAR(20),
    MAHP VARCHAR(20),
    DIEMTHI VARBINARY(MAX),
    PRIMARY KEY (MASV, MAHP),
    FOREIGN KEY (MASV) REFERENCES SINHVIEN(MASV) ON DELETE CASCADE,
    FOREIGN KEY (MAHP) REFERENCES HOCPHAN(MAHP) ON DELETE CASCADE
);

GO

-- Tạo Asymmetric Key với thuật toán RSA_2048
CREATE ASYMMETRIC KEY AsymKey_NhanVien
WITH ALGORITHM = RSA_2048; -- Sử dụng thuật toán RSA với độ dài khóa 2048 bit
GO

-- Stored Procedure để chèn dữ liệu vào bảng NHANVIEN
CREATE PROCEDURE SP_INS_PUBLIC_NHANVIEN
    @MANV VARCHAR(20),
    @HOTEN NVARCHAR(100),
    @EMAIL VARCHAR(20),
    @LUONGCB INT,
    @TENDN NVARCHAR(100),
    @MK NVARCHAR(100) -- Mật khẩu trước khi mã hóa
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MATKHAU VARBINARY(MAX);
    DECLARE @LUONG_ENCRYPTED VARBINARY(MAX);
    DECLARE @PUBKEY VARCHAR(20);
	DECLARE @LUONGCB_CONVERTED VARBINARY(MAX) = CONVERT(VARBINARY(MAX), @LUONGCB);

    -- Mã hóa mật khẩu bằng SHA1
    SET @MATKHAU = HASHBYTES('SHA1', @MK);

    -- Mã hóa lương bằng Asymmetric Key (RSA)
    SET @LUONG_ENCRYPTED = ENCRYPTBYASYMKEY(ASYMKEY_ID('AsymKey_NhanVien'), @LUONGCB_CONVERTED);

    -- Gán giá trị PUBKEY = MANV
    SET @PUBKEY = @MANV;

    -- Chèn dữ liệu vào bảng NHANVIEN
    INSERT INTO NHANVIEN (MANV, HOTEN, EMAIL, LUONG, TENDN, MATKHAU, PUBKEY)
    VALUES (@MANV, @HOTEN, @EMAIL, @LUONG_ENCRYPTED, @TENDN, @MATKHAU, @PUBKEY);
END;
GO

CREATE PROCEDURE SP_SEL_PUBLIC_NHANVIEN
    @TENDN NVARCHAR(100),
    @MK NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        MANV,
        HOTEN,
        EMAIL,
		CONVERT(INT, DECRYPTBYASYMKEY(ASYMKEY_ID('AsymKey_NhanVien'), LUONG)) AS LUONGCB
    FROM NHANVIEN
    WHERE TENDN = @TENDN
      AND MATKHAU = HASHBYTES('SHA1', @MK); -- Verify password
END;
GO

EXEC SP_INS_PUBLIC_NHANVIEN 'NV01', 'NGUYEN VAN A',
'NVA@', 3000000, 'NVA', 'abcd12'

-- Xem thông tin bảng NHANVIEN sau khi thêm dữ liệu
SELECT * FROM NHANVIEN;

EXEC SP_SEL_PUBLIC_NHANVIEN 'NVA', 'abcd12'


USE QLSVNhom;
GO

-- =============================================
-- STORED PROCEDURES FOR CLASS MANAGEMENT
-- =============================================

-- Procedure to add a new class
CREATE OR ALTER PROCEDURE SP_INS_LOP
    @MALOP VARCHAR(20),
    @TENLOP NVARCHAR(100),
    @MANV VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO LOP (MALOP, TENLOP, MANV)
    VALUES (@MALOP, @TENLOP, @MANV);
END;
GO

-- Procedure to update class information
CREATE OR ALTER PROCEDURE SP_UPD_LOP
    @MALOP VARCHAR(20),
    @TENLOP NVARCHAR(100),
    @MANV VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    
    UPDATE LOP
    SET TENLOP = @TENLOP,
        MANV = @MANV
    WHERE MALOP = @MALOP;
END;
GO

-- Procedure to delete a class
CREATE OR ALTER PROCEDURE SP_DEL_LOP
    @MALOP VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    
    DELETE FROM LOP
    WHERE MALOP = @MALOP;
END;
GO

-- Procedure to get all classes
CREATE OR ALTER PROCEDURE SP_SEL_LOP
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT L.MALOP, L.TENLOP, L.MANV, N.HOTEN AS TENNV
    FROM LOP L
    LEFT JOIN NHANVIEN N ON L.MANV = N.MANV;
END;
GO

-- Procedure to get classes managed by a specific employee
CREATE OR ALTER PROCEDURE SP_SEL_LOP_BY_MANV
    @MANV VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT L.MALOP, L.TENLOP, L.MANV, N.HOTEN AS TENNV
    FROM LOP L
    LEFT JOIN NHANVIEN N ON L.MANV = N.MANV
    WHERE L.MANV = @MANV;
END;
GO

-- Procedure to check if an employee manages a specific class
CREATE OR ALTER PROCEDURE SP_CHECK_EMPLOYEE_MANAGES_CLASS
    @MANV VARCHAR(20),
    @MALOP VARCHAR(20),
    @IS_MANAGER BIT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;
    
    IF EXISTS (SELECT 1 FROM LOP WHERE MALOP = @MALOP AND MANV = @MANV)
        SET @IS_MANAGER = 1;
    ELSE
        SET @IS_MANAGER = 0;
END;
GO

-- =============================================
-- STORED PROCEDURES FOR STUDENT MANAGEMENT
-- =============================================

-- Procedure to add a new student
CREATE OR ALTER PROCEDURE SP_INS_SINHVIEN
    @MASV VARCHAR(20),
    @HOTEN NVARCHAR(100),
    @NGAYSINH DATETIME,
    @DIACHI NVARCHAR(200),
    @MALOP VARCHAR(20),
    @TENDN NVARCHAR(100),
    @MK NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @MATKHAU VARBINARY(MAX);
    
    -- Mã hóa mật khẩu bằng SHA1
    SET @MATKHAU = HASHBYTES('SHA1', @MK);
    
    INSERT INTO SINHVIEN (MASV, HOTEN, NGAYSINH, DIACHI, MALOP, TENDN, MATKHAU)
    VALUES (@MASV, @HOTEN, @NGAYSINH, @DIACHI, @MALOP, @TENDN, @MATKHAU);
END;
GO

-- Procedure to update student information
CREATE OR ALTER PROCEDURE SP_UPD_SINHVIEN
    @MASV VARCHAR(20),
    @HOTEN NVARCHAR(100),
    @NGAYSINH DATETIME,
    @DIACHI NVARCHAR(200),
    @MALOP VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    
    UPDATE SINHVIEN
    SET HOTEN = @HOTEN,
        NGAYSINH = @NGAYSINH,
        DIACHI = @DIACHI,
        MALOP = @MALOP
    WHERE MASV = @MASV;
END;
GO

-- Procedure to delete a student
CREATE OR ALTER PROCEDURE SP_DEL_SINHVIEN
    @MASV VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    
    DELETE FROM SINHVIEN
    WHERE MASV = @MASV;
END;
GO

-- Procedure to get students by class
CREATE OR ALTER PROCEDURE SP_SEL_SINHVIEN_BY_MALOP
    @MALOP VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT MASV, HOTEN, NGAYSINH, DIACHI, MALOP, TENDN
    FROM SINHVIEN
    WHERE MALOP = @MALOP;
END;
GO

-- Procedure to authenticate a student
CREATE OR ALTER PROCEDURE SP_SEL_SINHVIEN_AUTH
    @TENDN NVARCHAR(100),
    @MK NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT MASV, HOTEN, NGAYSINH, DIACHI, MALOP
    FROM SINHVIEN
    WHERE TENDN = @TENDN
    AND MATKHAU = HASHBYTES('SHA1', @MK);
END;
GO

-- =============================================
-- STORED PROCEDURES FOR GRADE MANAGEMENT
-- =============================================

-- Procedure to insert a grade with encryption using employee's public key
CREATE OR ALTER PROCEDURE SP_INS_BANGDIEM
    @MASV VARCHAR(20),
    @MAHP VARCHAR(20),
    @DIEMTHI FLOAT,
    @MANV VARCHAR(20) -- Public key for encryption
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @DIEMTHI_VARBINARY VARBINARY(MAX) = CONVERT(VARBINARY(MAX), @DIEMTHI);
    DECLARE @DIEMTHI_ENCRYPTED VARBINARY(MAX);
    
    -- Encrypt the grade using the employee's public key (MANV)
    SET @DIEMTHI_ENCRYPTED = ENCRYPTBYASYMKEY(ASYMKEY_ID('AsymKey_NhanVien'), @DIEMTHI_VARBINARY);
    
    INSERT INTO BANGDIEM (MASV, MAHP, DIEMTHI)
    VALUES (@MASV, @MAHP, @DIEMTHI_ENCRYPTED);
END;
GO

-- Procedure to update a grade with encryption
CREATE OR ALTER PROCEDURE SP_UPD_BANGDIEM
    @MASV VARCHAR(20),
    @MAHP VARCHAR(20),
    @DIEMTHI FLOAT,
    @MANV VARCHAR(20) -- Public key for encryption
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @DIEMTHI_VARBINARY VARBINARY(MAX) = CONVERT(VARBINARY(MAX), @DIEMTHI);
    DECLARE @DIEMTHI_ENCRYPTED VARBINARY(MAX);
    
    -- Encrypt the grade using the employee's public key (MANV)
    SET @DIEMTHI_ENCRYPTED = ENCRYPTBYASYMKEY(ASYMKEY_ID('AsymKey_NhanVien'), @DIEMTHI_VARBINARY);
    
    UPDATE BANGDIEM
    SET DIEMTHI = @DIEMTHI_ENCRYPTED
    WHERE MASV = @MASV AND MAHP = @MAHP;
END;
GO

-- Procedure to get grades for a student (decrypted)
CREATE OR ALTER PROCEDURE SP_SEL_BANGDIEM_BY_MASV
    @MASV VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT 
        BD.MASV,
        S.HOTEN AS TENSV,
        BD.MAHP,
        HP.TENHP,
        CAST(CAST(DECRYPTBYASYMKEY(ASYMKEY_ID('AsymKey_NhanVien'), BD.DIEMTHI) AS VARCHAR) AS FLOAT) AS DIEMTHI
    FROM BANGDIEM BD
    JOIN SINHVIEN S ON BD.MASV = S.MASV
    JOIN HOCPHAN HP ON BD.MAHP = HP.MAHP
    WHERE BD.MASV = @MASV;
END;
GO

-- Procedure to get grades for a course (decrypted)
CREATE OR ALTER PROCEDURE SP_SEL_BANGDIEM_BY_MAHP
    @MAHP VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT 
        BD.MASV,
        S.HOTEN AS TENSV,
        BD.MAHP,
        HP.TENHP,
        CAST(CAST(DECRYPTBYASYMKEY(ASYMKEY_ID('AsymKey_NhanVien'), BD.DIEMTHI) AS VARCHAR) AS FLOAT) AS DIEMTHI
    FROM BANGDIEM BD
    JOIN SINHVIEN S ON BD.MASV = S.MASV
    JOIN HOCPHAN HP ON BD.MAHP = HP.MAHP
    WHERE BD.MAHP = @MAHP;
END;
GO

-- Procedure to get grades for students in a specific class (decrypted)
CREATE OR ALTER PROCEDURE SP_SEL_BANGDIEM_BY_MALOP
    @MALOP VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT 
        BD.MASV,
        S.HOTEN AS TENSV,
        BD.MAHP,
        HP.TENHP,
        CAST(CAST(DECRYPTBYASYMKEY(ASYMKEY_ID('AsymKey_NhanVien'), BD.DIEMTHI) AS VARCHAR) AS FLOAT) AS DIEMTHI
    FROM BANGDIEM BD
    JOIN SINHVIEN S ON BD.MASV = S.MASV
    JOIN HOCPHAN HP ON BD.MAHP = HP.MAHP
    WHERE S.MALOP = @MALOP;
END;
GO 